[
    {
        "question_id": 1,
        "standard_answer": "import re\n\ndef get_lowercase_words(text):\n    words = re.findall(r'\\w+', text.lower())\n    return words\n\ndef get_urls(text):\n    urls = re.findall(r'https?://[^\\s)]+', text)\n    return urls\n\ndef word_count_and_positions(text, word):\n    text_lower = text.lower()\n    word_lower = word.lower()\n    count, index = 0, 0\n    positions = []\n    word_len = len(word_lower)\n    while index < len(text_lower):\n        index = text_lower.find(word_lower, index)\n        if index == -1:\n            break\n        positions.append(index)\n        count += 1\n        index += word_len\n    return count, positions\n\ntext = \"\"\"\nCrowdStrike(https://www.crowdstrike.com/en-us/) Threat Hunting Report 2024 highlights the increase in living off the land exploits, insider threats, identity compromise, and cloud-specific threats as modern adversaries evolve to bypass traditional security solutions.\n\nAt Fal.Con 2024 (September 16-19 in Las Vegas), Arsen Darakdjian, Senior Vice President of Global Cybersecurity from Paramount, will join Suril Desai, our VP of Detection Engineering, in a breakout session(https://mktoab560139.com/) to discuss how technological innovations in deception technology are enabling security teams to defend against these stealthy threats.\n\nRead this blog to learn about this session and the role of cyber deception in the evolving threat landscape.\n\"\"\"\n\n# 任务1：输出所有单词并转换为小写\nwords = get_lowercase_words(text)\nprint(\"所有单词（小写）:\", words)\n# 预期输出: ['crowdstrike', 'https', 'www', 'crowdstrike', 'com', 'en', 'us', 'threat', 'hunting', 'report', '2024', 'highlights', 'the', 'increase', 'in', 'living', 'off', 'the', 'land', 'exploits', 'insider', 'threats', 'identity', 'compromise', 'and', 'cloud', 'specific', 'threats', 'as', 'modern', 'adversaries', 'evolve', 'to', 'bypass', 'traditional', 'security', 'solutions', 'at', 'fal', 'con', '2024', 'september', '16', '19', 'in', 'las', 'vegas', 'arsen', 'darakdjian', 'senior', 'vice', 'president', 'of', 'global', 'cybersecurity', 'from', 'paramount', 'will', 'join', 'suril', 'desai', 'our', 'vp', 'of', 'detection', 'engineering', 'in', 'a', 'breakout', 'session', 'https', 'mktoab560139', 'com', 'to', 'discuss', 'how', 'technological', 'innovations', 'in', 'deception', 'technology', 'are', 'enabling', 'security', 'teams', 'to', 'defend', 'against', 'these', 'stealthy', 'threats', 'read', 'this', 'blog', 'to', 'learn', 'about', 'this', 'session', 'and', 'the', 'role', 'of', 'cyber', 'deception', 'in', 'the', 'evolving', 'threat', 'landscape']\n\n# 任务2：输出所有网址\nurls = get_urls(text)\nprint(\"所有网址:\", urls)\n# 预期输出: ['https://www.crowdstrike.com/en-us/', 'https://mktoab560139.com/']\n\n# 任务3：计算threat的出现次数和位置\nword = \"threat\"\ncount, positions = word_count_and_positions(text, word)\nprint(f\"单词'{word}'出现次数: {count}\")\nprint(f\"出现位置: {positions}\")\n# 预期输出: 单词'threat'出现次数: 2, 出现位置（从0开始）： [7, 104]",
        "type": "standard_answer"
    },
    {
        "question_id": 3,
        "standard_answer": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    \n    return quicksort(left) + middle + quicksort(right)\n\n# 测试代码\nif __name__ == \"__main__\":\n    test_list = [64, 34, 25, 12, 22, 11, 90]\n    sorted_list = quicksort(test_list)\n    print(f\"原列表: {test_list}\")\n    print(f\"排序后: {sorted_list}\")",
        "type": "standard_answer"
    },
    {
        "question_id": 5,
        "standard_answer": "def is_leap_year(year):\n    # 判断是否是闰年\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False\n\ndef days_in_month(year, month):\n    # 每个月的天数\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        return 29 if is_leap_year(year) else 28\n    return 0\n\ndef add_days_to_date(year, month, day, days_to_add):\n    # 增加天数到指定日期\n    while days_to_add > 0:\n        days_in_current_month = days_in_month(year, month)\n        if day + days_to_add <= days_in_current_month:\n            day += days_to_add\n            days_to_add = 0\n        else:\n            days_to_add -= (days_in_current_month - day + 1)\n            day = 1\n            if month == 12:\n                month = 1\n                year += 1\n            else:\n                month += 1\n    return year, month, day\n\ndef format_date(year, month, day):\n    # 格式化日期为YYYY-MM-DD\n    return f\"{year:04d}-{month:02d}-{day:02d}\"\n\ndef calculate_vacation_dates(year, total_vacation_days):\n    # 初始化日期为该年的1月1日\n    start_year, start_month, start_day = year, 1, 1\n    # 每半天累计一次，m天年假意味着2m次累计\n    total_vacation_halves = total_vacation_days * 2\n    # 每次累计的间隔时间为总天数除以累计次数\n    interval_days = 365 / total_vacation_halves\n    if is_leap_year(year):\n        interval_days = 366 / total_vacation_halves\n    \n    # 存储结果的列表\n    vacation_dates = []\n    for i in range(1, total_vacation_halves + 1):\n        # 计算每次累计的日期\n        days_to_add = int(i * interval_days)\n        year_calc, month_calc, day_calc = add_days_to_date(start_year, start_month, start_day, days_to_add)\n        vacation_dates.append(format_date(year_calc, month_calc, day_calc))\n    return vacation_dates\n\n# 测试用例\nyear = 2023\ntotal_vacation_days = 10\nvacation_dates = calculate_vacation_dates(year, total_vacation_days)\nprint(vacation_dates)\n# 预期输出: ['2023-01-19', '2023-02-06', '2023-02-24', '2023-03-15', '2023-04-02', '2023-04-20', '2023-05-08', '2023-05-27', '2023-06-14', '2023-07-02', '2023-07-20', '2023-08-08', '2023-08-26', '2023-09-13', '2023-10-01', '2023-10-20', '2023-11-07', '2023-11-25', '2023-12-13', '2024-01-01']",
        "type": "standard_answer"
    }
] 